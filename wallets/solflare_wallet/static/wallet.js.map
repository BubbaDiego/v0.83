{"version":3,"file":"static/wallet.js","mappings":";AAoBA;AAEA;ACHA;AAEA","sources":["webpack://@solflare/extension/../../libs/shared/dist/features/nfts/components/web/WebNftFilter.js","webpack://@solflare/extension/../../libs/shared/dist/features/nfts/components/web/WebNftGroupFilter.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from '@emotion/styled';\nimport { Icon, Typography } from '@solflare/foundation-ui';\nimport { Button } from '@solflare/foundation-ui';\nimport { Dropdown, DropdownItem } from '../../../../components';\nimport { SORT_BY } from '../../constants';\nimport { useNFTContext } from '../../context';\nimport { useNftData } from '../../hooks/useNftData';\nconst StyledButton = styled(Button)(({ active }) => ({\n    '&:hover': {\n        backgroundColor: 'rgba(245, 248, 255, 0.04) !important',\n    },\n    height: '48px',\n    border: '1px solid rgba(245, 248, 255, 0.12) !important',\n    boxSizing: 'border-box',\n    backgroundColor: active ? 'rgba(245, 248, 255, 0.08) !important' : 'transparent !important',\n}));\nconst StyledIcon = styled(Icon) `\n  ${({ disabled }) => disabled && `color: rgba(226, 234, 255, 0.19) !important;`}\n`;\nexport const WebNftFilter = () => {\n    const { t } = useTranslation();\n    const { isPending } = useNftData();\n    const { sortedKey, handleSortClick } = useNFTContext();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n    const btnRef = React.useRef(null);\n    const SORT_COPY = {\n        [SORT_BY.TOTAL_VALUE]: t('nft_filter_sort_by_total_value_title'),\n        [SORT_BY.FLOOR_PRICE]: t('nft_filter_sort_by_floor_price_title'),\n        [SORT_BY.BEST_PERFORMANCE]: t('nft_filter_sort_by_best_performance_title'),\n        [SORT_BY.ALPHABETICALLY]: t('nft_filter_sort_by_alphabetically_title'),\n    };\n    return (_jsxs(_Fragment, { children: [_jsx(StyledButton, { active: open, left: _jsx(StyledIcon, { icon: 'page_info', size: 's', disabled: isPending }), onClick: (e) => setAnchorEl(e.currentTarget), variant: 'secondary', disabled: isPending, ref: btnRef, children: SORT_COPY[sortedKey] }), _jsxs(Dropdown, { open: open, minWidth: btnRef?.current?.offsetWidth, onClose: () => setAnchorEl(null), onClick: () => setAnchorEl(null), anchorEl: anchorEl, children: [_jsxs(DropdownItem, { selected: sortedKey === SORT_BY.TOTAL_VALUE, onClick: () => {\n                            handleSortClick(SORT_BY.TOTAL_VALUE);\n                        }, children: [_jsxs(Typography, { children: [\" \", SORT_COPY[SORT_BY.TOTAL_VALUE]] }), sortedKey === SORT_BY.TOTAL_VALUE && _jsx(Icon, { size: 's', icon: 'check_circle_outline' })] }), _jsxs(DropdownItem, { selected: sortedKey === SORT_BY.FLOOR_PRICE, onClick: () => {\n                            handleSortClick(SORT_BY.FLOOR_PRICE);\n                        }, children: [_jsx(Typography, { children: SORT_COPY[SORT_BY.FLOOR_PRICE] }), sortedKey === SORT_BY.FLOOR_PRICE && _jsx(Icon, { size: 's', icon: 'check_circle_outline' })] }), _jsxs(DropdownItem, { selected: sortedKey === SORT_BY.BEST_PERFORMANCE, onClick: () => {\n                            handleSortClick(SORT_BY.BEST_PERFORMANCE);\n                        }, children: [_jsx(Typography, { children: SORT_COPY[SORT_BY.BEST_PERFORMANCE] }), sortedKey === SORT_BY.BEST_PERFORMANCE && _jsx(Icon, { size: 's', icon: 'check_circle_outline' })] }), _jsxs(DropdownItem, { selected: sortedKey === SORT_BY.ALPHABETICALLY, onClick: () => {\n                            handleSortClick(SORT_BY.ALPHABETICALLY);\n                        }, children: [_jsx(Typography, { children: SORT_COPY[SORT_BY.ALPHABETICALLY] }), sortedKey === SORT_BY.ALPHABETICALLY && _jsx(Icon, { size: 's', icon: 'check_circle_outline' })] })] })] }));\n};\n\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from '@emotion/styled';\nimport { Button, Icon, Typography } from '@solflare/foundation-ui';\nimport { Dropdown, DropdownItem } from '../../../../components';\nimport { SORT_BY } from '../../constants';\nimport { useNFTContext } from '../../context';\nimport { useNftData } from '../../hooks/useNftData';\nconst StyledButton = styled(Button)(({ active }) => ({\n    '&:hover': {\n        backgroundColor: 'rgba(245, 248, 255, 0.04) !important',\n    },\n    height: '48px',\n    border: '1px solid rgba(245, 248, 255, 0.12) !important',\n    boxSizing: 'border-box',\n    backgroundColor: active ? 'rgba(245, 248, 255, 0.08) !important' : 'transparent !important',\n}));\nconst StyledIcon = styled(Icon) `\n  ${({ disabled }) => disabled && `color: rgba(226, 234, 255, 0.19) !important;`}\n`;\nexport const WebNftGroupFilter = () => {\n    const { t } = useTranslation();\n    const { isPending } = useNftData();\n    const { sortedGroupKey, handleSortGroupClick } = useNFTContext();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n    const btnRef = React.useRef(null);\n    const SORT_COPY = {\n        [SORT_BY.RARITY]: t('nft_filter_sort_by_rarest_title'),\n        [SORT_BY.ALPHABETICALLY]: t('nft_filter_sort_by_alphabetically_title'),\n    };\n    return (_jsxs(\"div\", { children: [_jsx(StyledButton, { active: open, left: _jsx(StyledIcon, { icon: 'page_info', size: 's', disabled: isPending }), onClick: (e) => setAnchorEl(e.currentTarget), variant: 'secondary', disabled: isPending, ref: btnRef, children: SORT_COPY[sortedGroupKey] }), _jsxs(Dropdown, { open: open, minWidth: btnRef?.current?.offsetWidth, onClose: () => setAnchorEl(null), onClick: () => setAnchorEl(null), anchorEl: anchorEl, children: [_jsxs(DropdownItem, { selected: sortedGroupKey === SORT_BY.RARITY, onClick: () => {\n                            handleSortGroupClick(SORT_BY.RARITY);\n                        }, children: [_jsx(Typography, { children: SORT_COPY[SORT_BY.RARITY] }), sortedGroupKey === SORT_BY.RARITY && _jsx(Icon, { size: 's', icon: 'check_circle_outline' })] }), _jsxs(DropdownItem, { selected: sortedGroupKey === SORT_BY.ALPHABETICALLY, onClick: () => {\n                            handleSortGroupClick(SORT_BY.ALPHABETICALLY);\n                        }, children: [_jsx(Typography, { children: SORT_COPY[SORT_BY.ALPHABETICALLY] }), sortedGroupKey === SORT_BY.ALPHABETICALLY && (_jsx(Icon, { size: 's', icon: 'check_circle_outline' }))] })] })] }));\n};\n\n"],"names":[],"sourceRoot":""}