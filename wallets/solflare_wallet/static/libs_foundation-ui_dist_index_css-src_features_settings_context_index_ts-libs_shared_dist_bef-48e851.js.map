{"version":3,"file":"static/libs_foundation-ui_dist_index_css-src_features_settings_context_index_ts-libs_shared_dist_bef-48e851.js","mappings":";;;;;;;;;;AAoFA","sources":["webpack://@solflare/extension/../../libs/shared/dist/context/reactQuery/ReactQueryProvider.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport styled from '@emotion/styled';\nimport { QueryClient } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { PersistQueryClientProvider, } from '@tanstack/react-query-persist-client';\nimport { del, get, set } from 'idb-keyval';\nconst includedQueryKeys = [\n    'tokens',\n    'balances',\n    'nfts',\n    'staking-accounts',\n    'intermediary',\n    'getParsedAccountInfo',\n    'banners',\n    'marketPrice',\n    'pfp',\n];\nconst CACHE_TIME = 1000 * 60 * 60 * 24; // 24 hours\nconst STALE_TIME = 10 * 1000; // for 10 seconds we block UI from calling api requests to BE\nconst queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            networkMode: 'always',\n            refetchOnWindowFocus: false,\n            staleTime: STALE_TIME,\n            gcTime: CACHE_TIME,\n        },\n    },\n});\nexport function createIDBPersister(idbValidKey = 'SOLFLARE_QUERY_CACHE') {\n    return {\n        persistClient: async (client) => {\n            try {\n                await set(idbValidKey, client);\n            }\n            catch (error) {\n                console.warn('Unexpected error during persistence:', error);\n            }\n        },\n        restoreClient: async () => {\n            try {\n                return await get(idbValidKey);\n            }\n            catch (error) {\n                console.error('Error restoring client:', error);\n                return null;\n            }\n        },\n        removeClient: async () => {\n            try {\n                await del(idbValidKey);\n            }\n            catch (error) {\n                console.error('Error removing client:', error);\n            }\n        },\n    };\n}\nconst isQueryKeyIncluded = (query) => {\n    return includedQueryKeys.some((key) => query.queryKey[0] === key ||\n        (Array.isArray(query.queryKey[0]) && query.queryKey[0][0] === key));\n};\nconst PERSIST_OPTIONS = {\n    persister: createIDBPersister(),\n    maxAge: CACHE_TIME,\n    buster: 'v1',\n    dehydrateOptions: {\n        shouldDehydrateQuery: isQueryKeyIncluded,\n    },\n};\nconst DevtoolsContainer = styled('div') `\n  .tsqd-open-btn-container {\n    bottom: 0;\n    right: 0;\n  }\n\n  .tsqd-open-btn {\n    height: 16px;\n    width: 16px;\n  }\n`;\nconst ReactQueryProvider = ({ disableDevTools = false, devToolsProps = {}, children }) => {\n    return (_jsxs(PersistQueryClientProvider, { client: queryClient, persistOptions: PERSIST_OPTIONS, children: [!disableDevTools && (_jsx(DevtoolsContainer, { children: _jsx(ReactQueryDevtools, { initialIsOpen: false, position: 'bottom', buttonPosition: 'bottom-right', ...devToolsProps }) })), children] }));\n};\nexport default ReactQueryProvider;\n\n"],"names":[],"sourceRoot":""}